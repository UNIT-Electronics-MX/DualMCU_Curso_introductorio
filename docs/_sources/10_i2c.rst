Control de pantalla OLED (I2C)
===============================

Objetivo
--------
El objetivo de este proyecto es usar el microcontrolador DualMCU para mostrar información en una pantalla OLED.

.. note::
  En esta práctica, se utilizará el **ESP32**.

Descripción
-----------
Visualizamos datos relevantes en un formato fácilmente comprensible y personalizable mediante una pantalla OLED en 3 diferentes fases:

1. Carga de la librería para el uso de la pantalla OLED SSD1306.
2. Mostrar información tipo texto en la pantalla.
3. Crear un contador regresivo con la capacidad de configurar el tiempo deseado y visualizar datos en tiempo real de sensores ambientales; puedes utilizar los sensores de las prácticas anteriores o uno nuevo.

Cabe mencionar que se usará comunicación I2C como protocolo entre la pantalla OLED y la DualMCU. La propuesta es que puedas utilizar cualquier sensor para mostrar los datos en la misma pantalla.

Requisitos
----------
- 1x Placa UNIT DualMCU  
  `Placa UNIT DualMCU <https://uelectronics.com/producto/unit-dualmcu-esp32-rp2040-tarjeta-de-desarrollo/>`_
- 1x Pantalla OLED  
  `Pantalla OLED <https://uelectronics.com/producto/display-oled-azul-y-blanco-128x64-0-96-i2c-ssd1306/>`_
- 1x Protoboard  
  `Protoboard <https://uelectronics.com/producto/protoboard-de-400pts-y-830pts-blanco-o-transparente/>`_
- 1x Cables para protoboard  
  `Cables para protoboard <https://uelectronics.com/producto/65-cables-para-protoboard-macho/>`_
- 1x Cables Dupont: Hembra - Macho  
  `Cables Dupont <https://uelectronics.com/producto/cables-dupont-largos-20cm-hh-mh-mm/>`_

Diagrama de conexión
--------------------
.. note::
  Recuerda que al trabajar con la DualMCU puedes intercambiar entre microcontroladores mediante el interruptor de cambios. Para esta práctica utilizaremos el microcontrolador **ESP32**; por lo tanto, debes cambiar el interruptor a la posición “B”.

.. figure:: /_static/2-Micropython/images/selector.png
  :alt: Block Diagram
  :width: 600px
  :align: center

El siguiente diagrama muestra la comunicación entre ambos módulos para mostrar un texto predeterminado:

.. image:: /_static/10-Control_de_pantalla_OLED/images/OLED1.jpg
  :alt: Block Diagram
  :align: center

Otra opción de conexión es a través de los pines de comunicación I2C QWIIC para ESP32:

.. image:: /_static/10-Control_de_pantalla_OLED/images/qwiic.png
  :alt: Block Diagram
  :width: 200px
  :align: center

Código
------
A continuación se muestra el código para visualizar la leyenda **“UNIT ELECTRONICS”**.

.. raw:: html

  <div style="text-align: right;">
      <a href="https://github.com/UNIT-Electronics-MX/DualMCU_Curso_introductorio/releases/download/v0.0.1/unitRP2040_oled.py" download="unitESP32_oled.py">
        <button style="background-color: #4CAF50; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer;">
          Download unitESP32_oled.py
        </button>
      </a>
  </div>

.. code-block:: python
    :linenos:

    '''
    Unit Electronics 2023
          (o_
      (o_    //\\
      (/)_   V_/_ 
    tested code mark
    version: 0.0.2
    revision: 0.0.2 (2024)
    '''

    import machine
    from ssd1306 import SSD1306_I2C

    i2c = machine.SoftI2C(sda=machine.Pin(21), scl=machine.Pin(22))

    oled = SSD1306_I2C(128, 32, i2c)

    oled.fill(1)
    oled.show()

    oled.fill(0)
    oled.show()
    oled.text('UNIT', 50, 10)
    oled.text('ELECTRONICS', 25, 20)

    oled.show()

En la siguiente imagen se observa el test funcionando:

.. image:: /_static/10-Control_de_pantalla_OLED/images/oled.jpg
  :alt: Block Diagram
  :width: 500px
  :align: center

A continuación se presenta otro código base que incluye:
    
  • Despliegue de la hora actual en formato digital.  
  • Función para un contador regresivo con tiempo de entrada.  
  • Ejemplo de inicialización y lectura de sensores ambientales (debes implementar la función ``read_sensor_data``).

.. raw:: html

  <div style="text-align: right;">
      <a href="https://github.com/UNIT-Electronics-MX/DualMCU_Curso_introductorio/releases/download/v0.0.1/unitRP2040_oled2.py" download="unitESP32_oled2.py">
        <button style="background-color: #4CAF50; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer;">
          Download unitESP32_oled2.py
        </button>
      </a>
  </div>

.. code-block:: python
    :linenos:

    from machine import Pin, I2C
    import ssd1306
    import time

    # Inicializar I2C
    i2c = machine.I2C(0, scl=machine.Pin(21), sda=machine.Pin(22))
    count = 100
    segundos = 0
    minutos = 15
    horas = 10

    # Inicializar la pantalla OLED
    display = ssd1306.SSD1306_I2C(128, 64, i2c)

    def get_current_time():
      global segundos, minutos, horas
      # Incrementar el contador de segundos
      segundos += 1

      # Verificar si ha pasado un minuto (60 segundos)
      if segundos == 60:
        segundos = 0
        minutos += 1

        # Verificar si ha pasado una hora (60 minutos)
        if minutos == 60:
            minutos = 0
            horas += 1

            # Verificar si ha pasado un día (24 horas)
            if horas == 24:
              horas = 0

      return segundos, minutos, horas

    def create_countdown():
      global count
      if count <= 0:
        count = 100
        raise ValueError("El tiempo del contador debe ser mayor que cero")
      count -= 1
      return count

    def read_sensor_data():
      # Implementar la función para leer los datos de los sensores ambientales
      pass

    while True:
      sec, minu, hour = get_current_time()

      # Crear un contador regresivo
      countdown = create_countdown()

      # Leer los datos de los sensores ambientales
      sensor_data = read_sensor_data()

      # Mostrar los datos en la pantalla OLED
      display.fill(0)
      display.text('Hora: ' + str(hour) + ":" + str(minu) + ":" + str(sec), 0, 0)
      display.text('Contador: ' + str(countdown), 0, 10)
      display.text('Datos del sensor: ' + str(sensor_data), 0, 20)
      display.show()

      time.sleep(1)




.. only:: html

    .. figure:: /_static/10-Control_de_pantalla_OLED/images/oled_hora.gif
        :align: center
        :alt: figura-gif
        :width: 60%



Conclusiones
------------
Durante el desarrollo de la práctica se evidenció el correcto establecimiento de la comunicación I2C con la pantalla OLED, subrayando la importancia de utilizar una librería compatible con el dispositivo. Se recomienda ajustar la práctica para adaptarla a sensores analógicos y digitales según tus necesidades.

Se invita a replicar la misma práctica utilizando el microcontrolador RP2040, aprovechando el conector QWIIC para facilitar la conexión. Recuerda ajustar la configuración del puerto I2C acorde a los pines del RP2040.

Biblioteca SSD1306
------------------
Para facilitar la programación con la pantalla OLED, hemos identificado una librería específica para OLED. Se recomienda copiar el siguiente código y guardarlo como ``ssd1306.py`` en la DualMCU.

.. raw:: html

  <div style="text-align: right;">
      <a href="https://github.com/UNIT-Electronics-MX/DualMCU_Curso_introductorio/releases/download/v0.0.1/ssd1306.py" download="ssd1306.py">
        <button style="background-color: #4CAF50; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer;">
          Download ssd1306.py
        </button>
      </a>
  </div>

.. code-block:: python
    :linenos:

      # MicroPython SSD1306 OLED driver, I2C and SPI interfaces
      # MicroPython SSD1306 OLED driver, I2C and SPI interfaces

      from micropython import const
      import framebuf


      # register definitions
      SET_CONTRAST = const(0x81)
      SET_ENTIRE_ON = const(0xA4)
      SET_NORM_INV = const(0xA6)
      SET_DISP = const(0xAE)
      SET_MEM_ADDR = const(0x20)
      SET_COL_ADDR = const(0x21)
      SET_PAGE_ADDR = const(0x22)
      SET_DISP_START_LINE = const(0x40)
      SET_SEG_REMAP = const(0xA0)
      SET_MUX_RATIO = const(0xA8)
      SET_COM_OUT_DIR = const(0xC0)
      SET_DISP_OFFSET = const(0xD3)
      SET_COM_PIN_CFG = const(0xDA)
      SET_DISP_CLK_DIV = const(0xD5)
      SET_PRECHARGE = const(0xD9)
      SET_VCOM_DESEL = const(0xDB)
      SET_CHARGE_PUMP = const(0x8D)

      # Subclassing FrameBuffer provides support for graphics primitives
      # http://docs.micropython.org/en/latest/pyboard/library/framebuf.html
      class SSD1306(framebuf.FrameBuffer):
          def __init__(self, width, height, external_vcc):
              self.width = width
              self.height = height
              self.external_vcc = external_vcc
              self.pages = self.height // 8
              self.buffer = bytearray(self.pages * self.width)
              super().__init__(self.buffer, self.width, self.height, framebuf.MONO_VLSB)
              self.init_display()

          def init_display(self):
              for cmd in (
                  SET_DISP | 0x00,  # off
                  # address setting
                  SET_MEM_ADDR,
                  0x00,  # horizontal
                  # resolution and layout
                  SET_DISP_START_LINE | 0x00,
                  SET_SEG_REMAP | 0x01,  # column addr 127 mapped to SEG0
                  SET_MUX_RATIO,
                  self.height - 1,
                  SET_COM_OUT_DIR | 0x08,  # scan from COM[N] to COM0
                  SET_DISP_OFFSET,
                  0x00,
                  SET_COM_PIN_CFG,
                  0x02 if self.width > 2 * self.height else 0x12,
                  # timing and driving scheme
                  SET_DISP_CLK_DIV,
                  0x80,
                  SET_PRECHARGE,
                  0x22 if self.external_vcc else 0xF1,
                  SET_VCOM_DESEL,
                  0x30,  # 0.83*Vcc
                  # display
                  SET_CONTRAST,
                  0xFF,  # maximum
                  SET_ENTIRE_ON,  # output follows RAM contents
                  SET_NORM_INV,  # not inverted
                  # charge pump
                  SET_CHARGE_PUMP,
                  0x10 if self.external_vcc else 0x14,
                  SET_DISP | 0x01,
              ):  # on
                  self.write_cmd(cmd)
              self.fill(0)
              self.show()

          def poweroff(self):
              self.write_cmd(SET_DISP | 0x00)

          def poweron(self):
              self.write_cmd(SET_DISP | 0x01)

          def contrast(self, contrast):
              self.write_cmd(SET_CONTRAST)
              self.write_cmd(contrast)

          def invert(self, invert):
              self.write_cmd(SET_NORM_INV | (invert & 1))

          def show(self):
              x0 = 0
              x1 = self.width - 1
              if self.width == 64:
                  # displays with width of 64 pixels are shifted by 32
                  x0 += 32
                  x1 += 32
              self.write_cmd(SET_COL_ADDR)
              self.write_cmd(x0)
              self.write_cmd(x1)
              self.write_cmd(SET_PAGE_ADDR)
              self.write_cmd(0)
              self.write_cmd(self.pages - 1)
              self.write_data(self.buffer)


      class SSD1306_I2C(SSD1306):
          def __init__(self, width, height, i2c, addr=0x3C, external_vcc=False):
              self.i2c = i2c
              self.addr = addr
              self.temp = bytearray(2)
              self.write_list = [b"\x40", None]  # Co=0, D/C#=1
              super().__init__(width, height, external_vcc)

          def write_cmd(self, cmd):
              self.temp[0] = 0x80  # Co=1, D/C#=0
              self.temp[1] = cmd
              self.i2c.writeto(self.addr, self.temp)

          def write_data(self, buf):
              self.write_list[1] = buf
              self.i2c.writevto(self.addr, self.write_list)


      class SSD1306_SPI(SSD1306):
          def __init__(self, width, height, spi, dc, res, cs, external_vcc=False):
              self.rate = 10 * 1024 * 1024
              dc.init(dc.OUT, value=0)
              res.init(res.OUT, value=0)
              cs.init(cs.OUT, value=1)
              self.spi = spi
              self.dc = dc
              self.res = res
              self.cs = cs
              import time

              self.res(1)
              time.sleep_ms(1)
              self.res(0)
              time.sleep_ms(10)
              self.res(1)
              super().__init__(width, height, external_vcc)

          def write_cmd(self, cmd):
              self.spi.init(baudrate=self.rate, polarity=0, phase=0)
              self.cs(1)
              self.dc(0)
              self.cs(0)
              self.spi.write(bytearray([cmd]))
              self.cs(1)

          def write_data(self, buf):
              self.spi.init(baudrate=self.rate, polarity=0, phase=0)
              self.cs(1)
              self.dc(1)
              self.cs(0)
              self.spi.write(buf)
              self.cs(1)



.. note::
  Archivo fuente original extraído del repositorio
  `micropython-ssd1306 <https://github.com/stlehmann/micropython-ssd1306/tree/master>`_
  de Stefan Lehmann.

Posteriormente, guarda este código en la DualMCU con el nombre de ``ssd1306.py``.

.. figure:: /_static/10-Control_de_pantalla_OLED/images/OLED_V2.jpg
  :alt: Block Diagram
  :align: center
